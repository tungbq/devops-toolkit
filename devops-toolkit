#!/bin/bash

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Default configuration options
DOCKER_IMAGE="${DOCKER_IMAGE:-tungbq/devops-toolkit:latest}"
CONFIG_MOUNT_PATH="${CONFIG_MOUNT_PATH:-$HOME/.dtc}"
CONTAINER_NAME="${CONTAINER_NAME:-devops_toolkit}"
CONTAINER_SHELL="${CONTAINER_SHELL:-/bin/bash}"
RUN_MODE="${RUN_MODE:-run}"  # Default to 'run'; change to 'exec' for existing containers
NETWORK="${NETWORK:---net=host}"

if [ -z "$CONTAINER_NAME" ]; then
    log $RED "No CONTAINER_NAME provided"
    exit 1
fi

pull_image() {
    local image="$1"

    if [[ "$image" != "sha256:"* ]]; then
        log $BLUE "Pulling image $image..."
        docker pull "$image" || { log $RED "Failed to pull image $image"; exit 1; }
    fi
}

# Check if the container exists, if not, create it
start_container() {
    local image="$1"
    if ! docker inspect --type=container "$CONTAINER_NAME" > /dev/null 2>&1; then
        log $BLUE "Starting new container with image $image..."
        docker run -d --name "$CONTAINER_NAME" \
            --volume "$PWD:$PWD" \
            --volume "$CONFIG_MOUNT_PATH:/dtc" \
            --workdir "$PWD" \
            --init \
            --entrypoint tail \
            $NETWORK \
            $DOCKER_ARGS \
            "$image" -f /dev/null > /dev/null || { log $RED "Failed to start container"; exit 1; }
        log $GREEN "Container started successfully"
    else
        log $YELLOW "Container $CONTAINER_NAME already exists"
    fi
}

# Execute a command inside an existing container
exec_in_container() {
    local command="$1"

    local RUN_CMD=$CONTAINER_SHELL

    if [ -n "$command" ]; then
        RUN_CMD+=" -c $command"
    fi

    log $BLUE "Executing command in container $CONTAINER_NAME..."
    docker exec -it "$CONTAINER_NAME" $RUN_CMD || {
        log $RED "Failed to execute command in container $CONTAINER_NAME"; exit 1;
    }
}

# Cleanup function to remove the container
cleanup() {
    log $YELLOW "Cleaning up..."
    if docker inspect --type=container "$CONTAINER_NAME" > /dev/null 2>&1; then
        docker stop "$CONTAINER_NAME" > /dev/null
        docker rm "$CONTAINER_NAME" > /dev/null
        log $YELLOW "Container $CONTAINER_NAME has been removed."
    else
        log $YELLOW "Container $CONTAINER_NAME does not exist."
    fi
}

# Usage function
usage() {
    log $BLUE "Usage: $0 [run|exec|cleanup] [command]"
    echo "  run: Start a new container and run a command"
    echo "  exec: Execute a command in an existing container"
    echo "  cleanup: Remove the container"
}

# Main logic
case "$1" in
    run)
        RUN_MODE="run"
        shift
        log $BLUE "Running in 'run' mode..."
        pull_image "$DOCKER_IMAGE"
        start_container "$DOCKER_IMAGE"
        exec_in_container "$@"
        ;;
    exec)
        RUN_MODE="exec"
        shift
        log $BLUE "Running in 'exec' mode..."
        exec_in_container "$@"
        ;;
    cleanup)
        cleanup
        exit 0
        ;;
    *)
        log $RED "Invalid command: $1"
        usage
        exit 1
        ;;
esac